{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:3001';\n\n// Interfaces para las diferentes tablas\n\nexport const dashboardService = {\n  // Usuarios\n  async getUsers(token) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    const response = await axios.get(`${API_URL}/auth/all`);\n    return response.data.map(user => ({\n      id: user.id.toString(),\n      name: user.username,\n      email: user.email,\n      role: user.role\n    }));\n  },\n  getUser: async id => {\n    const response = await axios.get(`${API_URL}/auth/${id}`);\n    return response.data;\n  },\n  createUser: async (data, token) => {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    const response = await axios.post(`${API_URL}/auth/create`, {\n      username: data.name,\n      email: data.email,\n      password: data.password,\n      role: data.role,\n      confirmPassword: data.password\n    });\n    return response.data;\n  },\n  updateUser: async (id, data) => {\n    const response = await axios.patch(`${API_URL}/auth/${id}`, data);\n    return response.data;\n  },\n  deleteUser: async (id, token) => {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    await axios.delete(`${API_URL}/auth/${id}`);\n  },\n  // Pabellones\n  async getPabellones(token) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    const response = await axios.get(`${API_URL}/pabellon`);\n    return response.data;\n  },\n  getPabellon: async id => {\n    const response = await axios.get(`${API_URL}/pabellon`);\n    return response.data;\n  },\n  createPabellon: async data => {\n    const response = await axios.post(`${API_URL}/pabellon`, {\n      nombre: data.name,\n      capacidad: data.capacity,\n      ubicacion: data.location,\n      tematica: data.tematica,\n      area: data.area\n    });\n    return response.data;\n  },\n  updatePabellon: async (id, data) => {\n    const response = await axios.patch(`${API_URL}/pabellon/${id}`, data);\n    return response.data;\n  },\n  deletePabellon: async id => {\n    await axios.delete(`${API_URL}/pabellon/${id}`);\n  },\n  // Eventos\n  getEvents: async () => {\n    const response = await axios.get(`${API_URL}/events`);\n    return response.data;\n  },\n  getEvent: async id => {\n    const response = await axios.get(`${API_URL}/events/${id}`);\n    return response.data;\n  },\n  createEvent: async data => {\n    const response = await axios.post(`${API_URL}/events`, data);\n    return response.data;\n  },\n  updateEvent: async (id, data) => {\n    const response = await axios.put(`${API_URL}/events/${id}`, data);\n    return response.data;\n  },\n  deleteEvent: async id => {\n    await axios.delete(`${API_URL}/events/${id}`);\n  },\n  // Participantes\n  getParticipants: async () => {\n    const response = await axios.get(`${API_URL}/participants`);\n    return response.data;\n  },\n  getParticipant: async id => {\n    const response = await axios.get(`${API_URL}/participants/${id}`);\n    return response.data;\n  },\n  createParticipant: async data => {\n    const response = await axios.post(`${API_URL}/participants`, data);\n    return response.data;\n  },\n  updateParticipant: async (id, data) => {\n    const response = await axios.put(`${API_URL}/participants/${id}`, data);\n    return response.data;\n  },\n  deleteParticipant: async id => {\n    await axios.delete(`${API_URL}/participants/${id}`);\n  }\n};","map":{"version":3,"names":["axios","API_URL","dashboardService","getUsers","token","defaults","headers","common","response","get","data","map","user","id","toString","name","username","email","role","getUser","createUser","post","password","confirmPassword","updateUser","patch","deleteUser","delete","getPabellones","getPabellon","createPabellon","nombre","capacidad","capacity","ubicacion","location","tematica","area","updatePabellon","deletePabellon","getEvents","getEvent","createEvent","updateEvent","put","deleteEvent","getParticipants","getParticipant","createParticipant","updateParticipant","deleteParticipant"],"sources":["/Users/jsrnieto/Documents/GitHub/CampusParty/Front/src/services/dashboard.service.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:3001';\n\n// Interfaces para las diferentes tablas\nexport interface AuthUser {\n  id: number;\n  username: string;\n  password_hash: string;\n  email: string;\n  role: string;\n  created_at: string;\n  last_login: string | null;\n  id_token: string | null;\n  token: string | null;\n  expires_at_token: string | null;\n  created_at_token: string | null;\n}\n\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  password: string;\n  confirmPassword: string;\n}\n\nexport interface Event {\n  id: string;\n  name: string;\n  description: string;\n  date: string;\n  location: string;\n}\n\nexport interface Participant {\n  id: string;\n  eventId: string;\n  userId: string;\n  status: string;\n}\n\nexport interface Pabellon {\n  id: string;\n  name: string;\n  capacity: number;\n  location: string;\n  tematica: string;\n  area: string;\n}\n\nexport interface DashboardService {\n  // Usuarios\n  getUsers: (token: string) => Promise<User[]>;\n  getUser: (id: string) => Promise<User>;\n  createUser: (data: Partial<User>, token: string) => Promise<User>;\n  updateUser: (id: string, data: Partial<User>) => Promise<User>;\n  deleteUser: (id: string, token: string) => Promise<void>;\n\n  // Pabellones\n  getPabellones: (token: string) => Promise<Pabellon[]>;\n  getPabellon: (id: string) => Promise<Pabellon>;\n  createPabellon: (data: Partial<Pabellon>) => Promise<Pabellon>;\n  updatePabellon: (id: string, data: Partial<Pabellon>) => Promise<Pabellon>;\n  deletePabellon: (id: string) => Promise<void>;\n\n  // Eventos\n  getEvents: () => Promise<Event[]>;\n  getEvent: (id: string) => Promise<Event>;\n  createEvent: (data: Partial<Event>) => Promise<Event>;\n  updateEvent: (id: string, data: Partial<Event>) => Promise<Event>;\n  deleteEvent: (id: string) => Promise<void>;\n\n  // Participantes\n  getParticipants: () => Promise<Participant[]>;\n  getParticipant: (id: string) => Promise<Participant>;\n  createParticipant: (data: Partial<Participant>) => Promise<Participant>;\n  updateParticipant: (id: string, data: Partial<Participant>) => Promise<Participant>;\n  deleteParticipant: (id: string) => Promise<void>;\n}\n\nexport const dashboardService: DashboardService = {\n  // Usuarios\n  async getUsers(token: string): Promise<User[]> {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    const response = await axios.get(`${API_URL}/auth/all`);\n    return response.data.map((user: AuthUser) => ({\n      id: user.id.toString(),\n      name: user.username,\n      email: user.email,\n      role: user.role\n    }));\n  },\n  getUser: async (id) => {\n    const response = await axios.get(`${API_URL}/auth/${id}`);\n    return response.data;\n  },\n  createUser: async (data: Partial<User>, token: string) => {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    const response = await axios.post(`${API_URL}/auth/create`, {\n      username: data.name,\n      email: data.email,\n      password: data.password,\n      role: data.role,\n      confirmPassword: data.password\n    });\n    return response.data;\n  },\n  updateUser: async (id, data) => {\n    const response = await axios.patch(`${API_URL}/auth/${id}`, data);\n    return response.data;\n  },\n  deleteUser: async (id, token: string) => {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    await axios.delete(`${API_URL}/auth/${id}`);\n  },\n\n  // Pabellones\n  async getPabellones(token: string): Promise<Pabellon[]> {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    const response = await axios.get(`${API_URL}/pabellon`);\n    return response.data;\n  },\n  getPabellon: async (id) => {\n    const response = await axios.get(`${API_URL}/pabellon`);\n    return response.data;\n  },\n  createPabellon: async (data: Partial<Pabellon>) => {\n    const response = await axios.post(`${API_URL}/pabellon`, \n      {\n        nombre:data.name, \n        capacidad:data.capacity, \n        ubicacion:data.location,\n        tematica:data.tematica,\n        area:data.area\n      });\n    return response.data;\n  },\n  updatePabellon: async (id, data) => {\n    const response = await axios.patch(`${API_URL}/pabellon/${id}`, data);\n    return response.data;\n  },\n  deletePabellon: async (id) => {\n    await axios.delete(`${API_URL}/pabellon/${id}`);\n  },\n\n  // Eventos\n  getEvents: async () => {\n    const response = await axios.get(`${API_URL}/events`);\n    return response.data;\n  },\n  getEvent: async (id) => {\n    const response = await axios.get(`${API_URL}/events/${id}`);\n    return response.data;\n  },\n  createEvent: async (data) => {\n    const response = await axios.post(`${API_URL}/events`, data);\n    return response.data;\n  },\n  updateEvent: async (id, data) => {\n    const response = await axios.put(`${API_URL}/events/${id}`, data);\n    return response.data;\n  },\n  deleteEvent: async (id) => {\n    await axios.delete(`${API_URL}/events/${id}`);\n  },\n\n  // Participantes\n  getParticipants: async () => {\n    const response = await axios.get(`${API_URL}/participants`);\n    return response.data;\n  },\n  getParticipant: async (id) => {\n    const response = await axios.get(`${API_URL}/participants/${id}`);\n    return response.data;\n  },\n  createParticipant: async (data) => {\n    const response = await axios.post(`${API_URL}/participants`, data);\n    return response.data;\n  },\n  updateParticipant: async (id, data) => {\n    const response = await axios.put(`${API_URL}/participants/${id}`, data);\n    return response.data;\n  },\n  deleteParticipant: async (id) => {\n    await axios.delete(`${API_URL}/participants/${id}`);\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}